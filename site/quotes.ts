export type QuoteSpec = {
  id: string,
  author: string,
  text: string,

  shortAuthor?: string,  // for authors with long names, so that it fits into a list item

  year?: number,
  hints?: string[],  // must be lower case
}

export const quoteSpecs: readonly Readonly<QuoteSpec>[] = [
  {
    id: "hello-world",
    author: "Anonymous",
    text: "Hello, world!",
    hints: ["l"],
  },
  {
    id: "zuse-1",
    author: "Konrad Zuse",
    text: "The danger of computers becoming like humans is not as great as the danger of humans becoming like computers",
    year: 2005,
    hints: ["g"],
  },
  {
    id: "stroustrup-1",
    author: "Bjarne Stroustrup",
    shortAuthor: "Bjarne",
    text: "\"How to test?\" is a question that cannot be answered in general. \"When to test?\" however, does have a general answer: as early and as often as possible",
    year: 2013,
  },
  {
    id: "stroustrup-2",
    author: "Bjarne Stroustrup",
    shortAuthor: "Bjarne",
    text: "There are only two kinds of languages: the ones people complain about and the ones nobody uses",
  },
  {
    id: "kay-1",
    author: "Alan Kay",
    text: "I made up the term \"object-oriented\", and I can tell you I did not have C++ in mind",
    year: 1997,
    hints: ["c"],
  },
  {
    id: "dijkstra-2",
    author: "Edsger Dijkstra",
    text: "We must be very careful when we give advice to younger people: sometimes they follow it",
    year: 1972,
    hints: ["f"],
  },
  {
    id: "dijkstra-3",
    author: "Edsger Dijkstra",
    text: "The purpose of abstracting is not to be vague, but to create a new semantic level in which one can be absolutely precise",
    year: 1972,
    hints: ["v"],
  },
  {
    id: "kay-2",
    author: "Alan Kay",
    text: "I don't know how many of you have ever met Dijkstra, but you probably know that arrogance in computer science is measured in nano-Dijkstras",
    year: 1997,
  },
  {
    id: "torvalds-4",
    author: "Linus Torvalds",
    text: "I have a firm belief that most firmware developers are not actually humans, but are instead caged rodents fed a solid diet of crack cocaine",
    year: 2025,
    hints: ["m", "w"],
  },
  {
    id: "booch-1",
    author: "Grady Booch",
    text: "In a quality object-oriented software system, you will find many classes that speak the language of the domain expert",
    year: 1996,
    hints: ["x"],
  },
  {
    id: "postel-1",
    author: "Jon Postel",
    text: "In general, an implementation must be conservative in its sending behavior, and liberal in its receiving behavior",
    year: 1981,
    hints: ["l"],
  },
  {
    id: "codd-1",
    author: "Edgar F. Codd",
    text: "At the time, Nixon was normalizing relations with China. I figured that if he could normalize relations, then so could I",
    year: 1981,
    hints: ["f"],
  },
  {
    id: "sicp-1",
    author: "Structure and Interpretation of Computer Programs",
    shortAuthor: "SICP",
    text: "Programs must be written for people to read, and only incidentally for machines to execute",
    year: 1984,
    hints: ["y"],
  },
  {
    id: "torvalds-2",
    author: "Linus Torvalds",
    text: "Every time I see some piece of medical research saying that caffeine is good for you, I high-five myself. Because I'm going to live forever",
    year: 2010,
  },
  {
    id: "zimmermann-1",
    author: "Philip Zimmermann",
    text: "If privacy is outlawed, only outlaws will have privacy",
    year: 1999,
    hints: ["o"],
  },
  {
    id: "torvalds-1",
    author: "Linus Torvalds",
    text: "When you say \"I wrote a program that crashed Windows\", people just stare at you blankly and say \"Hey, I got those with the system, *for free*\"",
    year: 1995,
  },
  {
    id: "armstrong-1",
    author: "Joe Armstrong",
    text: "I had a plan: learn Emacs, learn UNIX, and learn a programming language. What happened? I didn't learn Emacs, I didn't learn UNIX, and I invented a new programming language",
    year: 2018,
    hints: ["x"],
  },
  {
    id: "tanenbaum-1",
    author: "Andrew Tanenbaum",
    text: "Never underestimate the bandwidth of a station wagon full of tapes hurtling down the highway",
    year: 1996,
    hints: ["h", "p"],
  },
  {
    id: "minsky-2",
    author: "Marvin Minsky",
    text: "Computer languages of the future will be more concerned with goals and less with procedures specified by the programmer",
    year: 1969,
    hints: ["f"],
  },
  {
    id: "zen-of-python-1",
    author: "The Zen of Python",
    text: "In the face of ambiguity, refuse the temptation to guess",
    hints: ["f", "b"],
  },
  {
    id: "redwine-1",
    author: "Sam Redwine",
    text: "Software and cathedrals are much the same â€” first we build them, then we pray",
    year: 1988,
  },
  {
    id: "dijkstra-1",
    author: "Edsger Dijkstra",
    text: "Program testing can be used to show the presence of bugs, but never to show their absence",
    year: 1970,
    hints: ["g"],
  },
  {
    id: "torvalds-3",
    author: "Linus Torvalds",
    text: "I am a lazy person, which is why I like open source, for other people to do work for me",
    year: 2015,
  },
  {
    id: "brooks-1",
    author: "Fred Brooks",
    text: "The bearing of a child takes nine months, no matter how many women are assigned",
    year: 1975,
  },
  {
    id: "hickey-1",
    author: "Rich Hickey",
    text: "We just fire the starting pistol every hundred yards and call it a new sprint",
    year: 2011,
    hints: ["w"],
  },
  {
    id: "hoare-1",
    author: "Tony Hoare",
    text: "There are two ways of constructing a software design. One way is to make it so simple that there are obviously no deficiencies. And the other way is to make it so complicated that there are no obvious deficiencies",
    year: 1980,
  },
  {
    id: "anderson-1",
    author: "Poul Anderson",
    text: "I've yet to see any problem, however complicated, which when you looked at it the right way didn't become still more complicated",
    year: 1957,
  },
  {
    id: "kernighan-1",
    author: "Brian Kernighan",
    text: "Everyone knows that debugging is twice as hard as writing a program in the first place. So if you're as clever as you can be when you write it, how will you ever debug it?",
    year: 1978,
  },
]